import { NextRequest, NextResponse } from "next/server";
import { nftCollectionContractAddress } from "../../utils/contract";

const ENGINE_URL = process.env.ENGINE_URL!;
const THIRDWEB_SECRET_KEY = process.env.THIRDWEB_SECRET_KEY!;
const BACKEND_WALLET_ADDRESS = process.env.BACKEND_WALLET_ADDRESS!;
const CHAIN_ID = process.env.CHAIN_ID!;

export async function POST(req: NextRequest) {
    console.log("POST /api/mint called");


    const { nftImage, address } = await req.json();
    console.log("Request body:", { nftImage, address });

    if (!nftImage || !address) {
        console.error("Missing nftImage or address in the request body");
        return NextResponse.json({ error: "Invalid request data" }, { status: 400 });
    }

    try {
        const mintURL = `${ENGINE_URL}/contract/${CHAIN_ID}/0x2b3D19fe7F3B244EBB6A6CFA57071fdF0Eef5266/erc721/mint-to/`;
        console.log("Mint URL:", mintURL);

        const headers = {
            "Content-Type": "application/json",
            Authorization: `Bearer ${THIRDWEB_SECRET_KEY}`,
            "x-backend-wallet-address": BACKEND_WALLET_ADDRESS,
        };
        console.log("Headers:", headers);

        const res = await fetch(mintURL, {
            method: "POST",
            headers: headers,
            body: JSON.stringify({
                receiver: address,
                metadata: {
                    name: "AI NFT",
                    description: "An NFT generated by AI",
                    image: nftImage, // Use the image URL directly
                },
            }),
        });

        const responseData = await res.text();
        console.log("Thirdweb minting response:", responseData);

        if (!res.ok) {
            console.error("Failed to mint NFT:", responseData);
            throw new Error('Failed to mint NFT');
        }

        return NextResponse.json({ data: "NFT minted successfully" });
    } catch (error) {
        console.error("Minting error: ", error);
        return NextResponse.json({ error: "Failed to mint NFT" }, { status: 500 });
    }
}
